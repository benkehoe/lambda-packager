SHELL = /bin/bash
BUILD_DIR = ./.build

MERGED_UPLOAD_CONFIG_FILE = $(BUILD_DIR)/upload_config

#CONFIG={"logical_id_example": {"CodeUri": "./example"}}

ifndef CONFIG
ifdef TEMPLATE
CONFIG := $(shell python$(PYTHON_VERSION) -m lambda_packager.config_from_template $(TEMPLATE))
else
ifdef CODE_URI
NAME = $(basename $(CODE_URI))
ifdef FUNCTION_NAME
CONFIG := {"$(NAME)": {"CodeUri": "$(CODE_URI)", "FunctionName": "$(FUNCTION_NAME)"} }
else
CONFIG := {"$(NAME)": {"CodeUri": "$(CODE_URI)"}
endif
endif
endif
endif

#,:=,
#CONFIG := $(strip \
#  $(if $(CONFIG), \
#    $(CONFIG), \
#    $(if $(CODE_URI), \
#      $(if $(FUNCTION_NAME), \
#        {"$(basename $(CODE_URI))": {"CodeUri": "$(CODE_URI)"$(,) "FunctionName": "$(FUNCTION_NAME)"}}, \
#        {"$(basename $(CODE_URI))": {"CodeUri": "$(CODE_URI)"}} \
#      ), \
#      \
#    ) \
#  ) \
#)

FUNC_NAMES:=$(shell if [ -n "$(CONFIG)" ]; then echo '$(CONFIG)' | jq -r 'to_entries | map(.key) | join(" ")'; fi)

MERGE_UPLOAD_CONFIG_CMD := python$(PYTHON_VERSION) -m lambda_packager.merge_upload_config $(foreach func_name,$(FUNC_NAMES),-i $(func_name) $(call func_upload_config,$(func_name)))

.DEFAULT_GOAL = print_config
.PHONY: print_config
print_config: require_config
	@printf "%-24s %-24s %s\n" LogicalId FunctionName CodeUri
	$(foreach func_name,$(FUNC_NAMES),@printf "%-24s %-24s %-24s\n" $(func_name) "$(if $(call get_config_field,$(func_name),FunctionName),$(call func_deploy_name,$(func_name)))" "$(call func_src_dir,$(func_name))")
